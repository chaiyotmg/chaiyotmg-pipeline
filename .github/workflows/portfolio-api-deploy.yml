name: Portfolio API - Deploy
on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch app to pull'
        required: true
        default: 'main'
      app-name:
        description: 'App name to deploy'
        required: true
        type: choice
        options:
          - 'go-portfolio-api'
      tag:
        description: 'Tag or version'
        required: true
        default: 'v0.1.0'
      build_app:
        description: 'Run build step?'
        type: boolean
        required: true
        default: true
  # push:
  #   branches:
  #     - main
        
jobs:
  build:
    runs-on: self-hosted
    steps:
      - name: Clean up workspace
        run: |
          echo "Cleaning up temporary files..."
          rm -rf $(pwd)/*
          
      - name: Checkout ${{ vars.USERNAME }}/${{ inputs.app-name }} repository
        if: ${{ github.event.inputs.build_app == true }}
        uses: actions/checkout@v2
        with:
          repository: ${{ vars.USERNAME }}/${{ inputs.app-name }}
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          ref: ${{ inputs.branch }}
          path: ${{ inputs.app-name }}
          fetch-depth: 1
          submodules: false

      - name: Build app...
        if: ${{ github.event.inputs.build_app == true }}
        run: |
          cd ${{ inputs.app-name }}
          GOOS=linux GOARCH=amd64 GOMAXPROCS=1 go build -o ${{ inputs.app-name }}-app ./cmd/server/main.go
          mv ${{ inputs.app-name }}-app ../${{ inputs.app-name }}-app

      - name: Create zip file
        if: ${{ github.event.inputs.build_app == true }}
        run: |
          zip ${{ inputs.app-name }}-app.zip ${{ inputs.app-name }}-app
          echo "Created ${{ inputs.app-name }}-app.zip"
    
      - name: Upload app to github packages
        if: ${{ github.event.inputs.build_app == true }}
        uses: softprops/action-gh-release@v2
        with:
          repository: ${{ vars.USERNAME }}/${{ inputs.app-name }}
          files: ${{ inputs.app-name }}-app.zip
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          tag_name: ${{ inputs.tag }}

      - name: Download github packages
        if: ${{ github.event.inputs.build_app != true }}
        uses: robinraju/release-downloader@v1
        with:
          repository: ${{ vars.USERNAME }}/${{ inputs.app-name }}
          tag: ${{ inputs.tag }}
          fileName: ${{ inputs.app-name }}-app.zip
          token: ${{ secrets.REPO_ACCESS_TOKEN }}


      - name: Check if zip file exists
        run: |
          FILE_PATH="./${{ inputs.app-name }}-app.zip"
          if [ -f "$FILE_PATH" ]; then
            echo "✅ File '$FILE_PATH' found successfully!"
            ls -lh "$FILE_PATH"
          else
            echo "❌ Error: File '$FILE_PATH' not found!"
            exit 1
          fi  

      - name: List files
        run: |
          ls -la

      - name: Unzip file
        run: |
          unzip -j ./${{ inputs.app-name }}-app.zip


      # - name: Setup SSH
      #   run: |
      #     mkdir -p ~/.ssh
      #     echo "${{ secrets.BACKEND_SERVER_PRIVATE_KEY }}" > ~/.ssh/id_rsa
      #     chmod 600 ~/.ssh/id_rsa
      #     ssh-keyscan -H ${{ secrets.BACKEND_SERVER_HOST }} >> ~/.ssh/known_hosts


      # - name: List files
      #   run: |
      #     cat ~/.ssh/known_hosts

      - name: current dir 
        run: |
          echo "${{ github.workspace }}"
          echo "hello pack" > pack.txt

      - name: List files
        run: |
          ls -la

      - name: Upload app to server
        run: |
          scp -r ./${{ inputs.app-name }}-app ${{ vars.BACKEND_SERVER_USERNAME }}@${{ vars.BACKEND_SERVER_HOST }}:/home/go_portfolio_api_app_user
            
      # - name: Upload app to server
      #   run: |
      #     scp -i ./ssh_private_key ./${{ inputs.app-name }}-app.zip ${{ vars.BACKEND_SERVER_USERNAME }}@${{ secrets.BACKEND_SERVER_HOST }}:/home/${{ vars.BACKEND_SERVER_USERNAME }}/ 
     
      # - name: Upload Files
      #   uses: appleboy/scp-action@v1
      #   with:
      #     host: ${{ secrets.BACKEND_SERVER_HOST }}
      #     username: ${{ vars.BACKEND_SERVER_USERNAME }}
      #     key: ${{ secrets.BACKEND_SERVER_PRIVATE_KEY }}
      #     port: ${{ secrets.PORT }}
      #     source: "${{ github.workspace }}/go-portfolio-api-app.zip"
      #     target: /home/ubuntu/go-portfolio-api-app.zip

      # - name: Upload app to server
      #   uses: wlixcc/SFTP-Deploy-Action@v1.2.6
      #   with:
      #     username: '${{ vars.BACKEND_SERVER_USERNAME }}'
      #     server: '${{ secrets.BACKEND_SERVER_HOST }}'
      #     ssh_private_key: ${{ secrets.BACKEND_SERVER_PRIVATE_KEY }}
      #     local_path: './${{ inputs.app-name }}-app/${{ inputs.app-name }}-app'
      #     remote_path: '/home/${{ vars.GO_PORTFOLIO_API_USER }}/${{ inputs.app-name }}-app'
      #     rsyncArgs: '--exclude=node_modules --exclude=.git --exclude=*.log'
      #     sftpArgs: '-o ConnectTimeout=5'

      # - name: Create dir
      #   run: |
      #     if [ ! -d "${{ vars.NODEJS_APP_PATH }}" ]; then
      #         mkdir -p ${{ vars.NODEJS_APP_PATH }}
      #         echo "Directory created: ${{ vars.NODEJS_APP_PATH }}"
      #     fi
        
      # - name: Copy files to target dir
      #   run: |
      #     if [ -d "${{ vars.NODEJS_APP_PATH }}" ]; then
      #         cp -r $(pwd)/${{ vars.NODEJS_APP_NAME }}/* ${{ vars.NODEJS_APP_PATH }}/
      #         echo "Files copied to: ${{ vars.NODEJS_APP_PATH }}"
      #     else
      #         echo "Dir not found!! : ${{ vars.NODEJS_APP_PATH }}"
      #     fi