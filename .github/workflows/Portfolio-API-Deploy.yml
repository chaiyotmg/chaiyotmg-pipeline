name: Portfolio API - Deploy
on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch app to pull'
        required: true
        default: 'main'
      app-name:
        description: 'App name to deploy'
        required: true
        type: choice
        options:
          - 'go-portfolio-api'
      tag:
        description: 'Tag or version'
        required: true
        default: 'v0.1.0'
  # push:
  #   branches:
  #     - main
        
jobs:
  build:
    runs-on: self-hosted
    steps:
      - name: Clean up workspace
        run: |
          echo "Cleaning up temporary files..."
          rm -rf $(pwd)/*
          
      - name: Checkout ${{ vars.USERNAME }}/${{ inputs.app-name }} repository
        uses: actions/checkout@v2
        with:
          repository: ${{ vars.USERNAME }}/${{ inputs.app-name }}
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          ref: ${{ inputs.branch }}
          path: ${{ inputs.app-name }}
          fetch-depth: 1
          submodules: false

      - name: Build app...
        run: |
          cd ${{ inputs.app-name }}
          GOOS=linux GOARCH=amd64 GOMAXPROCS=1 go build -o ${{ inputs.app-name }}-app ./cmd/server/main.go
          mv ${{ inputs.app-name }}-app ../${{ inputs.app-name }}-app

      - name: List files
        run: |
          ls -la

      - name: Create archive app
        run: |
          zip ${{ inputs.app-name }}-app.zip ${{ inputs.app-name }}-app
          echo "Created ${{ inputs.app-name }}-app.zip"
    
      - name: Upload app to github packages
        uses: softprops/action-gh-release@v2
        with:
          repository: ${{ vars.USERNAME }}/${{ inputs.app-name }}
          files: ${{ inputs.app-name }}-app.zip
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          tag_name: ${{ inputs.tag }}

      - name: Download github packages
        uses: robinraju/release-downloader@v1
        with:
          repository: ${{ vars.USERNAME }}/${{ inputs.app-name }}
          tag: ${{ inputs.tag }}
          fileName: ${{ inputs.app-name }}-app.zip
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          dest: '.' 

      - name: Check if file exists
        run: |
          FILE_PATH="./${{ inputs.app-name }}-app.zip"
          if [ -f "$FILE_PATH" ]; then
            echo "✅ File '$FILE_PATH' found successfully!"
            ls -lh "$FILE_PATH" # แสดงข้อมูลไฟล์
          else
            echo "❌ Error: File '$FILE_PATH' not found!"
            exit 1 # ทำให้ step นี้ fail
          fi     
          
      # - name: Execute remote SSH commands using password
      #   uses: appleboy/ssh-action@v1
      #   with:
      #     host: ${{ secrets.BACKEND_SERVER_HOST }}
      #     username: ${{ vars.BACKEND_SERVER_USERNAME }}
      #     key: ${{ secrets.BACKEND_SERVER_SECRETKEY }}
      #     port: ${{ secrets.BACKEND_SERVER_PORT }}
      #     script: |
      #       echo "Current directory is: $(pwd)"
      #       ls -al

          


      # - name: Create dir
      #   run: |
      #     if [ ! -d "${{ vars.NODEJS_APP_PATH }}" ]; then
      #         mkdir -p ${{ vars.NODEJS_APP_PATH }}
      #         echo "Directory created: ${{ vars.NODEJS_APP_PATH }}"
      #     fi
        
      # - name: Copy files to target dir
      #   run: |
      #     if [ -d "${{ vars.NODEJS_APP_PATH }}" ]; then
      #         cp -r $(pwd)/${{ vars.NODEJS_APP_NAME }}/* ${{ vars.NODEJS_APP_PATH }}/
      #         echo "Files copied to: ${{ vars.NODEJS_APP_PATH }}"
      #     else
      #         echo "Dir not found!! : ${{ vars.NODEJS_APP_PATH }}"
      #     fi
          
      # - name: Install package with npm
      #   run: |
      #     cd ${{ vars.NODEJS_APP_PATH }}
      #     npm install
        
      # - name: Start app!
      #   run: |
      #     pm2 delete all || true
      #     pm2 start ${{ vars.NODEJS_APP_PATH }}/index.js --name '${{ vars.NODEJS_APP_NAME }}'
      #     pm2 save
      #     sudo systemctl restart nginx
